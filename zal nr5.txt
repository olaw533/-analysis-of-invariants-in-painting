clc;
close all;
clear all;

net = [];
net1 = [];
net2 = [];
for k = 1:50
  jpgFilename = sprintf('%d.jpg', k);
  fullFileName = fullfile('Modigliani', jpgFilename);
  if exist(fullFileName, 'file')
    imdata = imread(fullFileName );
    imdata = imresize(imdata, [600 800]);
  else
    warningMessage = sprintf('Warning: image file does not exist:\n%s', fullFileName);
    uiwait(warndlg(warningMessage));
  end
imdata = rgb2gray(imdata);
imdata = im2double(imdata);

%Znalezienie sredniej i odejmowanie
immean = mean(imdata);
immean1 = immean;
immean1 = immean1  + immean;
immean1 = immean1/50;
[a,b] = size(imdata);
immean_new = repmat(immean,a,1);
new = imdata - immean_new;
cov_new = cov(new);

%Kowariancja macierzy
cov_matrix=cov(cov_new);

%Wektory Własne
[V,D] = eig(cov_matrix);
D=diag(D);
eigenvector=V(:,find(D==max(D)));

%Rzut na wektory własne
finaldata=eigenvector'*[new]';

net(k) = norm(eigenvector);
%    LUB       %

V_trans = transpose(V);
new_trans = transpose(new);
%finaldata = V_trans * new_trans;


    
end

for k = 1:50
  jpgFilename = sprintf('%d.jpg', k);
  fullFileName = fullfile('Modigliani', jpgFilename);
  if exist(fullFileName, 'file')
    imdata = imread(fullFileName );
    imdata = imresize(imdata, [600 800]);
  else
    warningMessage = sprintf('Warning: image file does not exist:\n%s', fullFileName);
    uiwait(warndlg(warningMessage));
  end
imdata = rgb2gray(imdata);
imdata = im2double(imdata);

%Znalezienie sredniej i odejmowanie
immean = mean(imdata);
immean1 = immean;
immean1 = immean1  + immean;
immean1 = immean1/50;
[a,b] = size(imdata);
immean_new = repmat(immean,a,1);
new = imdata - immean_new;
cov_new = cov(new);

%Kowariancja macierzy
cov_matrix=cov(cov_new);

%Wektory Własne
[V,D] = eig(cov_matrix);
D=diag(D);
eigenvector=V(:,find(D==max(D)));

%Rzut na wektory własne
finaldata=eigenvector'*[new]';

net1(k) = norm(eigenvector);
%    LUB       %

V_trans = transpose(V);
new_trans = transpose(new);
%finaldata = V_trans * new_trans;


    
end

for k = 1:50
  jpgFilename = sprintf('%d.jpg', k);
  fullFileName = fullfile('Modigliani', jpgFilename);
  if exist(fullFileName, 'file')
    imdata = imread(fullFileName );
    imdata = imresize(imdata, [600 800]);
  else
    warningMessage = sprintf('Warning: image file does not exist:\n%s', fullFileName);
    uiwait(warndlg(warningMessage));
  end
imdata = rgb2gray(imdata);
imdata = im2double(imdata);

%Znalezienie sredniej i odejmowanie
immean = mean(imdata);
immean1 = immean;
immean1 = immean1  + immean;
immean1 = immean1/50;
[a,b] = size(imdata);
immean_new = repmat(immean,a,1);
new = imdata - immean_new;
cov_new = cov(new);

%Kowariancja macierzy
cov_matrix=cov(cov_new);

%Wektory Własne
[V,D] = eig(cov_matrix);
D=diag(D);
eigenvector=V(:,find(D==max(D)));

%Rzut na wektory własne
finaldata=eigenvector'*[new]';

%net2(k) = norm(eigenvector);
net2(k) = eigenvector;
%    LUB       %

V_trans = transpose(V);
new_trans = transpose(new);
%finaldata = V_trans * new_trans;


    
end
net2 = net2/50;


%Klasyfikacja
figure()
title('Klasyfikacja')
hold on
for i=1:size(net)
    
 plot(net(i),'ro')
 plot(net(i),'r*')
 plot(net1(i),'go')
 plot(net1(i),'g*')
 plot(net2(i),'bo')
 plot(net2(i),'b*')
 legend('czerwony - Modigliani','','zielony - van Gogh','','niebieski - Beksinski','');
    
end